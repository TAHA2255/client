"""
Django settings for activity_manager project.

Generated by 'django-admin startproject' using Django 5.0.9.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-pmeyol3$-_24gt9%u1xyqrr@h6(0*za-ci10uk6$bb=##eeu0e'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'user',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'activity_manager.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'activity_manager.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

import ldap
from django_auth_ldap.config import LDAPSearch, GroupOfNamesType, LDAPGroupQuery

# LDAP Server URI
AUTH_LDAP_SERVER_URI = "Ldap://10.172.170.154"

# LDAP Authentication Options
AUTH_LDAP_BIND_DN = "CN=admin,DC=kacwc,DC=org"  # Replace with your LDAP admin user
AUTH_LDAP_BIND_PASSWORD = "admin_password"       # Replace with your LDAP admin password
AUTH_LDAP_USER_SEARCH = LDAPSearch(
    "OU=KACWC USERS,DC=kacwc,DC=org",
    ldap.SCOPE_SUBTREE,
    "(sAMAccountName=%(user)s)",
)

# User Groups Mapping (Adapt from your C# code)
def map_group_to_dn(group_name):
    group_mappings = {
        "Creativity & Innovation Unit": "OU=Creativity & Innovation Unit,OU=Programs Division,OU=KACWC USERS,DC=kacwc,DC=org",
        "Knowledge & Learning Unit": "OU=Knowledge & Learning Unit,OU=Programs Division,OU=KACWC USERS,DC=kacwc,DC=org",
        "Research & Development Unit": "OU=Research & Development Unit,OU=Programs Division,OU=KACWC USERS,DC=kacwc,DC=org",
        "Operations & Support Unit": "OU=Operations & Support Unit,OU=Programs Division,OU=KACWC USERS,DC=kacwc,DC=org",
        "Human Resources Unit": "OU=Human Resources Unit,OU=Programs Division,OU=KACWC USERS,DC=kacwc,DC=org",
        "Information Technology Unit": "OU=Information Technology Unit,OU=Programs Division,OU=KACWC USERS,DC=kacwc,DC=org",
        "Finance & Budget Unit": "OU=Finance & Budget Unit,OU=Programs Division,OU=KACWC USERS,DC=kacwc,DC=org",
        "Procurement Unit": "OU=Procurement Unit,OU=Programs Division,OU=KACWC USERS,DC=kacwc,DC=org",
        "Legal Affairs Unit": "OU=Legal Affairs Unit,OU=Programs Division,OU=KACWC USERS,DC=kacwc,DC=org",
        "Marketing & Communications Unit": "OU=Marketing & Communications Unit,OU=Programs Division,OU=KACWC USERS,DC=kacwc,DC=org",
        # Add more mappings as necessary...
    }

    return group_mappings.get(group_name, "Group not found")

# Map Distinguished Name Based on Group
AUTH_LDAP_USER_DN_TEMPLATE = (
    "CN=%(user)s," + map_group_to_dn("<GROUP_NAME>")  # Replace <GROUP_NAME> dynamically
)

# Map LDAP Groups to Django Groups (Optional)
AUTH_LDAP_GROUP_SEARCH = LDAPSearch(
    "OU=Groups,DC=kacwc,DC=org", ldap.SCOPE_SUBTREE, "(objectClass=group)"
)
AUTH_LDAP_GROUP_TYPE = GroupOfNamesType()

# Synchronize LDAP Group Membership
AUTH_LDAP_MIRROR_GROUPS = True

# Populate Django User Fields
AUTH_LDAP_USER_ATTR_MAP = {
    "first_name": "givenName",
    "last_name": "sn",
    "email": "mail",
    "username": "uid",
    "passsword": "userPassword",
}

# Enable Authentication Backends
AUTHENTICATION_BACKENDS = [
    "django_auth_ldap.backend.LDAPBackend",
    "django.contrib.auth.backends.ModelBackend",
]

# Debugging (Optional)
import logging
logger = logging.getLogger("django_auth_ldap")
logger.addHandler(logging.StreamHandler())
logger.setLevel(logging.DEBUG)

